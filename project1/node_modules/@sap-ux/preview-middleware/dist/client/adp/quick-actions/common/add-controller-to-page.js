"use strict";

sap.ui.define(["sap/ui/dt/OverlayRegistry", "../../../utils/version", "../../utils", "../../../cpe/quick-actions/utils", "../../dialog-factory", "../../init-dialogs", "../../api-handler", "../simple-quick-action-base", "../dialog-enablement-validator"], function (OverlayRegistry, _____utils_version, ____utils, _____cpe_quick_actions_utils, ____dialog_factory, ____init_dialogs, ____api_handler, ___simple_quick_action_base, ___dialog_enablement_validator) {
  "use strict";

  const getUi5Version = _____utils_version["getUi5Version"];
  const getAllSyncViewsIds = ____utils["getAllSyncViewsIds"];
  const getControllerInfoForControl = ____utils["getControllerInfoForControl"];
  const getRelevantControlFromActivePage = _____cpe_quick_actions_utils["getRelevantControlFromActivePage"];
  const DialogFactory = ____dialog_factory["DialogFactory"];
  const DialogNames = ____dialog_factory["DialogNames"];
  const isControllerExtensionEnabledForControl = ____init_dialogs["isControllerExtensionEnabledForControl"];
  const getExistingController = ____api_handler["getExistingController"];
  const SimpleQuickActionDefinitionBase = ___simple_quick_action_base["SimpleQuickActionDefinitionBase"];
  const DIALOG_ENABLEMENT_VALIDATOR = ___dialog_enablement_validator["DIALOG_ENABLEMENT_VALIDATOR"];
  const ADD_CONTROLLER_TO_PAGE_TYPE = 'add-controller-to-page';
  const CONTROL_TYPES = ['sap.f.DynamicPage', 'sap.uxap.ObjectPageLayout'];

  /**
   * Quick Action for adding controller to a page.
   */
  class AddControllerToPageQuickAction extends SimpleQuickActionDefinitionBase {
    constructor(context) {
      super(ADD_CONTROLLER_TO_PAGE_TYPE, CONTROL_TYPES, '', context, [DIALOG_ENABLEMENT_VALIDATOR]);
    }
    controllerExists = false;
    async initialize() {
      for (const control of getRelevantControlFromActivePage(this.context.controlIndex, this.context.view, CONTROL_TYPES)) {
        const version = await getUi5Version();
        const syncViewsIds = await getAllSyncViewsIds(version);
        const controlInfo = getControllerInfoForControl(control);
        const data = await getExistingController(controlInfo.controllerName);
        this.controllerExists = data?.controllerExists;
        const isActiveAction = isControllerExtensionEnabledForControl(control, syncViewsIds, version);
        this.control = isActiveAction ? control : undefined;
        break;
      }
    }
    get textKey() {
      return this.controllerExists ? 'QUICK_ACTION_SHOW_PAGE_CONTROLLER' : 'QUICK_ACTION_ADD_PAGE_CONTROLLER';
    }
    async execute() {
      if (this.control) {
        const overlay = OverlayRegistry.getOverlay(this.control) || [];
        await DialogFactory.createDialog(overlay, this.context.rta, DialogNames.CONTROLLER_EXTENSION);
      }
      return [];
    }
  }
  var __exports = {
    __esModule: true
  };
  __exports.ADD_CONTROLLER_TO_PAGE_TYPE = ADD_CONTROLLER_TO_PAGE_TYPE;
  __exports.AddControllerToPageQuickAction = AddControllerToPageQuickAction;
  return __exports;
});
//# sourceMappingURL=add-controller-to-page.js.map