'use strict';
sap.ui.define([
    'sap/ui/fl/apply/api/FlexRuntimeInfoAPI',
    'open/ux/preview/client/thirdparty/@sap-ux-private/control-property-editor-common',
    '../../../cpe/quick-actions/utils',
    '../quick-action-base'
], function (FlexRuntimeInfoAPI, ___sap_ux_private_control_property_editor_common, _____cpe_quick_actions_utils, ___quick_action_base) {
    'use strict';
    const NESTED_QUICK_ACTION_KIND = ___sap_ux_private_control_property_editor_common['NESTED_QUICK_ACTION_KIND'];
    const getRelevantControlFromActivePage = _____cpe_quick_actions_utils['getRelevantControlFromActivePage'];
    const QuickActionDefinitionBase = ___quick_action_base['QuickActionDefinitionBase'];
    const ACTION_ID = 'CTX_SETTINGS0';
    class TableQuickActionDefinitionBase extends QuickActionDefinitionBase {
        isApplicable = false;
        isClearButtonEnabled = false;
        children = [];
        tableMap = {};
        constructor(type, controlTypes, defaultTextKey, context, isSkipVariantManagementCheck) {
            let enablementValidators = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];
            super(type, NESTED_QUICK_ACTION_KIND, defaultTextKey, context, enablementValidators);
            this.type = type;
            this.controlTypes = controlTypes;
            this.defaultTextKey = defaultTextKey;
            this.context = context;
            this.isSkipVariantManagementCheck = isSkipVariantManagementCheck;
            this.enablementValidators = enablementValidators;
        }
        async initialize() {
            let index = 0;
            for (const smartTable of getRelevantControlFromActivePage(this.context.controlIndex, this.context.view, this.controlTypes)) {
                if (!this.isSkipVariantManagementCheck) {
                    const hasVariantManagement = FlexRuntimeInfoAPI.hasVariantManagement({ element: smartTable });
                    if (!hasVariantManagement) {
                        continue;
                    }
                }
                const actions = await this.context.actionService.get(smartTable.getId());
                const changeColumnAction = actions.find(action => action.id === ACTION_ID);
                if (changeColumnAction) {
                    this.children.push({
                        label: `'${ smartTable.getHeader() }' table`,
                        enabled: true,
                        children: []
                    });
                    this.tableMap[`${ this.children.length - 1 }`] = index;
                    index++;
                }
            }
            if (this.children.length > 0) {
                this.isApplicable = true;
            }
        }
        getActionObject() {
            return {
                kind: NESTED_QUICK_ACTION_KIND,
                id: this.id,
                enabled: !this.isDisabled,
                tooltip: this.tooltip,
                title: this.context.resourceBundle.getText(this.textKey),
                children: this.children
            };
        }
    }
    var __exports = { __esModule: true };
    __exports.TableQuickActionDefinitionBase = TableQuickActionDefinitionBase;
    return __exports;
});