"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.asyncInterceptorTypesMapping = exports.interceptorTypesMapping = exports.InterceptorTypes = void 0;
const interceptors = __importStar(require("./index"));
var InterceptorTypes;
(function (InterceptorTypes) {
    /**
     * Simple notification interceptor, reports certain event
     * occurance and requires no data to be captured or measured.
     */
    InterceptorTypes["NOTIFICATION"] = "notify";
    /**
     * Duration interceptor, measures and reports runtime of decorated method.
     */
    InterceptorTypes["DURATION"] = "duration";
    /**
     * Captures specified in paramCaptureConfig parameter of decorated method.
     */
    InterceptorTypes["CAPTURE_PARAM"] = "captureParam";
})(InterceptorTypes || (exports.InterceptorTypes = InterceptorTypes = {}));
const interceptorTypesMapping = new Map();
exports.interceptorTypesMapping = interceptorTypesMapping;
interceptorTypesMapping.set(InterceptorTypes.NOTIFICATION, interceptors.notify);
interceptorTypesMapping.set(InterceptorTypes.DURATION, interceptors.duration);
interceptorTypesMapping.set(InterceptorTypes.CAPTURE_PARAM, interceptors.captureParam);
const asyncInterceptorTypesMapping = new Map();
exports.asyncInterceptorTypesMapping = asyncInterceptorTypesMapping;
asyncInterceptorTypesMapping.set(InterceptorTypes.NOTIFICATION, interceptors.notifyAsync);
asyncInterceptorTypesMapping.set(InterceptorTypes.DURATION, interceptors.durationAsync);
asyncInterceptorTypesMapping.set(InterceptorTypes.CAPTURE_PARAM, interceptors.captureParamAsync);
//# sourceMappingURL=config.js.map