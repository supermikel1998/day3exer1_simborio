import type { Editor } from 'mem-fs-editor';
import { getAnnotationNamespaces } from './data';
import type { ProjectPaths } from './types';
import { OdataService, OdataVersion, ServiceType, CdsAnnotationsInfo, EdmxAnnotationsInfo, NamespaceAlias } from './types';
/**
 * Try finding a package.json and a ui5.yaml for the given project by looking upwards in the folder hierachy.
 *
 * @param {string} basePath - the root path of an existing UI5 application
 * @param {Editor} [fs] - the memfs editor instance
 * @returns an object with the optional locations of the package.json and ui5.yaml, ui5-local.yaml, ui5-mock.yaml
 */
export declare function findProjectFiles(basePath: string, fs: Editor): Promise<ProjectPaths>;
/**
 * Writes the odata service related file updates to an existing UI5 project specified by the base path.
 *
 * @param {string} basePath - the root path of an existing UI5 application
 * @param {OdataService} service - the OData service instance
 * @param {Editor} [fs] - the memfs editor instance
 * @throws {Error} - if required UI5 project files are not found
 * @returns {Promise<Editor>} the updated memfs editor instance
 */
declare function generate(basePath: string, service: OdataService, fs?: Editor): Promise<Editor>;
/**
 * Removes service related data from project files for an existing UI5 project specified by the base path.
 * Works as follow:
 * 1. Service is removed from manifest.
 * If service type is EDMX:
 * 2. ui5.yaml
 *  - backend data of the service is removed from fiori-tools-proxy middleware
 * 3. ui5-local.yaml
 *  - backend data of the service is removed from fiori-tools-proxy middleware
 *  - service is removed from mockserver middleware
 * 4. ui5-mock.yaml
 *  - service is removed from mockserver middleware
 * If service type is CDS:
 * 2. annotations of the service are removed from CDS files.
 *
 * @param {string} basePath - the root path of an existing UI5 application
 * @param {OdataService} service - the OData service instance
 * @param {string} service.name - name of the OData service instance
 * @param {string} service.path - path of the OData service instance
 * @param {string} service.url - url of the OData service instance
 * @param {ServiceType} service.type - type of the OData service instance
 * @param {OdataService['annotations']} service.annotations - services annotations (EDMX or CDS)
 * @param {Editor} [fs] - the memfs editor instance
 * @throws {Error} - if required UI5 project files are not found
 * @returns {Promise<Editor>} the updated memfs editor instance
 */
declare function remove(basePath: string, service: Required<Pick<OdataService, 'name' | 'path' | 'url' | 'type' | 'annotations'>>, fs?: Editor): Promise<Editor>;
export { generate, remove, OdataVersion, OdataService, ServiceType, EdmxAnnotationsInfo, CdsAnnotationsInfo };
export { getAnnotationNamespaces, NamespaceAlias };
//# sourceMappingURL=index.d.ts.map