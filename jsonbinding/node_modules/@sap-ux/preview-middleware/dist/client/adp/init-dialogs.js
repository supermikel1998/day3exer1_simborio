"use strict";

sap.ui.define(["sap/ui/rta/util/hasStableId", "sap/ui/fl/Utils", "../cpe/utils", "./dialog-factory"], function (hasStableId, FlUtils, ___cpe_utils, ___dialog_factory) {
  "use strict";

  const isReuseComponent = ___cpe_utils["isReuseComponent"];
  const DialogFactory = ___dialog_factory["DialogFactory"];
  const DialogNames = ___dialog_factory["DialogNames"];
  /**
   * Handler for enablement of Extend With Controller context menu entry
   *
   * @param control UI5 control.
   * @param syncViewsIds Runtime Authoring
   * @param ui5VersionInfo UI5 version information
   *
   * @returns boolean whether menu item is enabled or not
   */
  function isControllerExtensionEnabledForControl(control, syncViewsIds, ui5VersionInfo) {
    const clickedControlId = FlUtils.getViewForControl(control).getId();
    const isClickedControlReuseComponent = isReuseComponent(clickedControlId, ui5VersionInfo);
    return !syncViewsIds.includes(clickedControlId) && !isClickedControlReuseComponent;
  }

  /**
   * Handler for enablement of Extend With Controller context menu entry
   *
   * @param overlays Control overlays
   * @param syncViewsIds Runtime Authoring
   * @param ui5VersionInfo UI5 version information
   *
   * @returns boolean whether menu item is enabled or not
   */
  const isControllerExtensionEnabled = (overlays, syncViewsIds, ui5VersionInfo) => {
    if (overlays.length === 0 || overlays.length > 1) {
      return false;
    }
    return isControllerExtensionEnabledForControl(overlays[0].getElement(), syncViewsIds, ui5VersionInfo);
  };

  /**
   * Determines whether the fragment command should be enabled based on the provided overlays.
   *
   * @param {ElementOverlay[]} overlays - An array of ElementOverlay objects representing the UI overlays.
   * @param ui5VersionInfo UI5 version information
   * @returns {boolean} True if the fragment command is enabled, false otherwise.
   */
  const isFragmentCommandEnabled = (overlays, ui5VersionInfo) => {
    if (overlays.length === 0 || overlays.length > 1) {
      return false;
    }
    const control = overlays[0].getElement();
    return hasStableId(overlays[0]) && !isReuseComponent(control.getId(), ui5VersionInfo);
  };

  /**
   * Determines the text that should be displayed for the Add Fragment context menu item.
   *
   * @param {ElementOverlay} overlay - An ElementOverlay object representing the UI overlay.
   * @returns {string} The text of the Add Fragment context menu item.
   */
  const getAddFragmentItemText = overlay => {
    if (!hasStableId(overlay)) {
      return 'Add: Fragment (Unavailable due to unstable ID of the control or its parent control)';
    }
    return 'Add: Fragment';
  };

  /**
   * Adds a new item to the context menu
   *
   * @param rta Runtime Authoring
   * @param syncViewsIds Ids of all application sync views
   * @param ui5VersionInfo UI5 version information
   */
  const initDialogs = (rta, syncViewsIds, ui5VersionInfo) => {
    const contextMenu = rta.getDefaultPlugins().contextMenu;
    contextMenu.addMenuItem({
      id: 'ADD_FRAGMENT',
      text: getAddFragmentItemText,
      handler: async overlays => await DialogFactory.createDialog(overlays[0], rta, DialogNames.ADD_FRAGMENT),
      icon: 'sap-icon://attachment-html',
      enabled: overlays => isFragmentCommandEnabled(overlays, ui5VersionInfo)
    });
    contextMenu.addMenuItem({
      id: 'EXTEND_CONTROLLER',
      text: 'Extend With Controller',
      handler: async overlays => await DialogFactory.createDialog(overlays[0], rta, DialogNames.CONTROLLER_EXTENSION),
      icon: 'sap-icon://create-form',
      enabled: overlays => isControllerExtensionEnabled(overlays, syncViewsIds, ui5VersionInfo)
    });
  };
  var __exports = {
    __esModule: true
  };
  __exports.isControllerExtensionEnabledForControl = isControllerExtensionEnabledForControl;
  __exports.isControllerExtensionEnabled = isControllerExtensionEnabled;
  __exports.isFragmentCommandEnabled = isFragmentCommandEnabled;
  __exports.getAddFragmentItemText = getAddFragmentItemText;
  __exports.initDialogs = initDialogs;
  return __exports;
});
//# sourceMappingURL=init-dialogs.js.map